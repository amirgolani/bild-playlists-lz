<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
        integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <title>Create</title>
</head>

<body>


    <form action="/create-isr" method="POST" enctype="multipart/form-data" id="myForm">

        <div class="container my-4">

            <div class="block has-background-white-bis p-6">
                <span class="title is-2 m-0">Lagezentrum</span><span class="title is-2 m-0 has-text-grey"> Israel</span><br>
                <a class="title has-text-link is-5 mb-4" href="/present-isr">View current live page</a><br><br>
                
                <div id="boxes-container" class="my-4">
                    <!-- Existing box -->
                    <div class="box my-2" id="box_1">
                        <div class="columns is-vcentered">

                            <div class="column is-3">
                                <input class="input" type="text" placeholder="Button Text" name="name_1"
                                    value="MAP Gaza" required>
                            </div>
                            <div class="column is-narrow">
                                <label class="checkbox">
                                    <input type="checkbox" name="mute_1">
                                    Mute
                                </label>
                            </div>
                            <div class="column is-narrow">
                                <label class="checkbox">
                                    <input type="checkbox" name="loop_1">
                                    Loop
                                </label>
                            </div>
                            <div class="column is-narrow">
                                <label class="checkbox">
                                    <input type="checkbox" name="ctrl_1">
                                    Control
                                </label>
                            </div>
                            <div class="column is-fullwidth">
                                <div class="file has-name">
                                    <label class="file-label">
                                        <input class="file-input" type="file" accept=".webm" name="file_1"
                                            onchange="updateFileName(this)" required>
                                        <span class="file-cta">
                                            <span class="file-icon">
                                                <i class="fas fa-upload"></i>
                                            </span>
                                            <span class="file-label">
                                                Choose a file…
                                            </span>
                                        </span>
                                        <span class="file-name">
                                        </span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    

                </div>
                <button type="submit" class="button is-dark has-background-info-dark is-vcentered">
                    <span class="title is-5 has-text-white">Submit</span></button>
                <button type="button" class="button is-info is-vcentered" style="width: 40px;"
                    onclick="handleList(false)"><i class="fa-solid fa-plus"></i></button>
                <button type="button" class="button is-info is-vcentered" style="width: 40px;"
                    onclick="handleList(true)"><i class="fa-solid fa-minus"></i></button>
            </div>
        </div>
    </form>

</body>
<script name="hanldeFilesNames">
    function updateFileName(input) {
        var fileNameContainer = input.closest('.file-label').querySelector('.file-name');
        var boxId = input.closest('.box').id;
        if (input.files.length > 0) {
            fileNameContainer.textContent = input.files[0].name;
        } else {
            fileNameContainer.textContent = 'Choose a file…';
        }
    }
</script>

<script>
    var boxCounter = 1;

    function handleList(remove) {
        var boxesContainer = document.getElementById('boxes-container');

        if (remove) {
            // Remove the last box
            var lastBox = boxesContainer.lastElementChild;
            if (lastBox && boxCounter > 1) {
                boxesContainer.removeChild(lastBox);
                boxCounter--;
            }
        } else {
            if (boxCounter < 13) {
                // Add a new box
                var newBox = document.createElement('div');
                newBox.className = 'box my-2';
                newBox.id = 'box_' + (boxCounter + 1);
                newBox.innerHTML = boxesContainer.firstElementChild.innerHTML; // Clone the first box
                updateBoxAttributes(newBox, boxCounter + 1);
                boxesContainer.appendChild(newBox);
                boxCounter++;
                // Set focus on the first input element in the new box
                var firstInput = newBox.querySelector('input');
                if (firstInput) {
                    firstInput.focus();
                }
            }
        }
    }

    function updateBoxAttributes(box, counter) {
        var inputs = box.querySelectorAll('input, label.checkbox');
        inputs.forEach(function (input) {
            if (input.tagName === 'INPUT') {
                var currentName = input.name;
                var newName = currentName.replace(/\d+/, counter);
                input.name = newName;
                input.value = "";
            }
        });
    }
</script>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
    function submitForm() {
        var form = document.getElementById('myForm');
        var formData = new FormData();

        // Loop through all form elements
        for (var i = 0; i < form.elements.length; i++) {
            var element = form.elements[i];

            // Check if the element is an input, select, textarea, etc.
            if (element.tagName.toLowerCase() !== 'button' && element.type !== 'submit') {
                // Handle checkboxes separately
                if (element.type === 'checkbox') {
                    formData.append(element.name, element.checked ? "on" : "off");
                } else {
                    // Add the element's name and value to the FormData object
                    formData.append(element.name, element.value);
                }
            }
        }

        // You can add additional data to the FormData object if needed
        // formData.append('key', 'value');

        // fetch('/create', {
        //     method: 'POST',
        //     body: formData
        // })
        //     .then(response => window.location.replace("/present"))
        //     // .then(data => {
        //     //     // Handle the response from the server
        //     //     console.log('Success:', data);
        //     // })
        //     .catch(error => {
        //         // Handle errors
        //         console.error('Error:', error);
        //     });


        axios.post('/create-isr', formData, {
            timeout: 1000000,
            headers: {
                'Content-Type': 'multipart/form-data',
            }
        })
            .then(response => {
                window.location.replace("/present-isr")
                // Handle success, e.g., show a success message to the user
            })
            .catch(error => {
                console.error('Error uploading files', error);
                // Handle error, e.g., show an error message to the user
            });

    }
</script>

</html>