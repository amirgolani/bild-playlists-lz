<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

  <title>Map</title>
  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css" integrity="sha512-Zcn6bjR/8RZbLEpLIeOwNtzREBAJnUKESxces60Mpoj+2okopSAcSUIUOseddDm0cxnGQzxIR7vJgsLZbdLE3w==" crossorigin="anonymous" referrerpolicy="no-referrer" /> <!-- Leaflet JavaScript -->
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/leaflet.sync@0.2.4/L.Map.Sync.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
  <link rel="stylesheet" href="/assets/css/player.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.3/gsap.min.js"></script>

</head>

<body>

  <div id="mainMap" style="position: absolute; left: 0; top: 0; height: 1080px; width: 1920px;"></div>
  <!-- <div style="color: #464646; font-family: 'Gotham'; background-color: black;"></div> -->
  <div style="position: absolute; left: 0; top: 0; height: 1080px; width: 1920px; background-image: url('/assets/gp/vign.png'); pointer-events: none; z-index: 400;">
  </div>
  <div id="fadeIn" style="position: absolute; left: 0; top: 0; height: 1080px; width: 1920px; background-color: black; pointer-events: none; z-index: 400;">
  </div>
  <script>

  </script>
  <!-- <div style="position: absolute; left: 0; top: 0; height: 1080px; width: 1920px; background-image: linear-gradient(20deg, rgba(18, 18, 18, 0.848) 0%,white 40%); z-index: 400; mix-blend-mode: multiply; pointer-events: none">
  </div>
  <div style="position: absolute; left: 0; top: 0; height: 1080px; width: 1920px; background-image: linear-gradient(185deg, rgba(255, 0, 0, 0.371) 0% ,rgb(255, 255, 255) 20%); z-index: 400; mix-blend-mode: darken; pointer-events: none">
  </div> -->
  <div id="playlists-icon" class="playlists-icon" style="z-index: 400;" onclick="window.location.assign('/playlists')"></div>

  <script>
    // Initialize the map

    console.log([`<%= specs.lat %>`, `<%= specs.lng %>`])
    var mainMap = L.map('mainMap').setView([`<%= specs.lat %>`, `<%= specs.lng %>`], `<%= specs.zoom %>`);
    // Imagery
    // L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
    //   attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
    // }).addTo(mainMap);

    // Dark
    // L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png', {
    //   attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
    //   subdomains: 'abcd',
    //   maxZoom: 20
    // }).addTo(mainMap)

    L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {
      attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ',
      maxZoom: 16
    }).addTo(mainMap)


    fetch('https://deepstatemap.live/api/history/last')
      .then(response => response.json())
      .then(data => {

        const {
          features
        } = data.map;
        for (i = 0; i < features.length; i++) {
          if (features[i].geometry.type === "Polygon") {
            L.geoJSON(features[i], {
              color: features[i].properties.fill,
              fillColor: features[i].properties.fill,
              fillOpacity: 0.4,
              weight: .5,
            }).addTo(mainMap);
          }
          // if (features[i].geometry.type === "Point") {
          //   if (features[i].properties.icon === "images/icon-1.png") {
          //     var theIcon = L.icon({
          //       iconUrl: '/assets/gp/nato/fh_1.png',
          //     });
          //   }
          //   if (features[i].properties.icon === "images/icon-4.png") {
          //     var theIcon = L.icon({
          //       iconUrl: '/assets/gp/nato/1_1.png',
          //     });
          //   }
          //   if (features[i].properties.icon === "images/icon-5.png") {
          //     var theIcon = L.icon({
          //       iconUrl: '/assets/gp/nato/2_1.png',
          //     });
          //   }
          //   L.marker([features[i].geometry.coordinates[1], features[i].geometry.coordinates[0]], {
          //     icon: theIcon
          //   }).addTo(mainMap);
          // }
          gsap.fromTo("#fadeIn",
        {
            opacity: 1
        },
        {
            opacity: 0,
            duration: 1,
            ease: "power2.inOut"

        });
        }
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });

    fetch('/geojson?value=Ukraine')
      .then(response => response.json())
      .then(data => {
        console.log(data)
        for (i = 0; i < data.features.length; i++) {
          if (data.features[i].geometry.type === "Polygon") {
            L.geoJSON(data.features[i], {
              color: '#464646',
              fillOpacity: 0,
              weight: 1
            }).addTo(mainMap);
          }
        }
      })

    fetch('/geojson?value=Russia')
      .then(response => response.json())
      .then(data => {
        console.log(data)
        for (i = 0; i < data.features.length; i++) {
          if (data.features[i].geometry.type === "Polygon") {
            L.geoJSON(data.features[i], {
              color: '#464646',
              fillOpacity: 0,
              weight: 1
            }).addTo(mainMap);
          }
        }
      })

    function addCities() {
      fetch('/ua-cities')
        .then(response => response.json())
        .then(data => {
          for (i = 0; i < parseInt(`<%= specs.cities %>`); i++) {
            var myIcon = L.divIcon({
              className: '',
              html: `<div class="has-text-dark" style="font-family: Gotham; font-weight: normal;">${data[i].city}</div>`
            });
            L.marker([data[i].lat, data[i].lng], {
              icon: myIcon,
            }).addTo(mainMap);
          }
        })
    }

    addCities()

    // var myIcon = L.divIcon({
    //   html: '<div class="button is-small is-dark p-2" style="font-family: Gotham; z-index: -9999;">Kiew</div>'
    // });
    // L.marker([50.45, 30.52], {
    //   icon: myIcon,
    // }).addTo(mainMap);

    // mainMap.on('zoom', addCities);
  </script>

</body>

</html>